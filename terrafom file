provider "aws" {
  region = "us-east-1"  # Replace with your desired AWS region
}

resource "aws_vpc" "example_vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "example-vpc"
  }
}

resource "aws_subnet" "example_subnet" {
  vpc_id     = aws_vpc.example_vpc.id
  cidr_block = "10.0.0.0/24"
  tags = {
    Name = "example-subnet"
  }
}

resource "aws_security_group" "example_sg" {
  name        = "example-security-group"
  description = "Example security group"
  vpc_id      = aws_vpc.example_vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "example_instance" {
  ami           = "ami-0c94855ba95c71c99"  # Replace with the desired AMI ID
  instance_type = "t2.micro"  # Replace with the desired instance type
  key_name      = "example-key"  # Replace with your desired SSH key name
  subnet_id     = aws_subnet.example_subnet.id
  vpc_security_group_ids = [aws_security_group.example_sg.id]

  tags = {
    Name = "example-instance"
  }
}

resource "aws_s3_bucket" "example_bucket" {
  bucket = "example-bucket"  # Replace with your desired bucket name
  acl    = "private"
}

resource "aws_iam_user" "example_user" {
  name = "example-user"  # Replace with your desired IAM user name
}

resource "aws_rds_instance" "example_rds" {
  engine           = "mysql"
  engine_version   = "5.7"
  instance_class   = "db.t2.micro"
  allocated_storage = 20
  storage_type     = "gp2"
  username         = "admin"
  password         = "password"
  db_subnet_group_name = aws_db_subnet_group.example_subnet_group.name

  vpc_security_group_ids = [aws_security_group.example_sg.id]

  tags = {
    Name = "example-rds"
  }
}

resource "aws_db_subnet_group" "example_subnet_group" {
  name       = "example-subnet-group"
  subnet_ids = [aws_subnet.example_subnet.id]
}

resource "aws_ecs_cluster" "example_cluster" {
  name = "example-cluster"
}

resource "aws_ecs_task_definition" "example_task" {
  family                   = "example-task"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]

  execution_role_arn = aws_iam_role.example_role.arn
  task_role_arn      = aws_iam_role.example_role.arn

  container_definitions = <<DEFINITION
  [
    {
      "name": "example-container",
      "image": "nginx:latest",
      "portMappings": [
        {
          "containerPort": 80,
          "protocol": "tcp"
        }
      ],
      "memory": 512,
      "cpu": 256
    }
  ]
  DEFINITION
}

resource "aws_iam_role" "example_role" {
  name = "example-role"

  assume_role_policy = <<POLICY
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Principal": {
          "Service": "ecs-tasks.amazonaws.com"
        },
        "Action": "sts:AssumeRole"
      }
    ]
  }
  POLICY
}
